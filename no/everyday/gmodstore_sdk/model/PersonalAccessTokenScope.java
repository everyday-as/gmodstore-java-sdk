/*
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.everyday.gmodstore_sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets PersonalAccessTokenScope
 */
@JsonAdapter(PersonalAccessTokenScope.Adapter.class)
public enum PersonalAccessTokenScope {
  
  PERMISSION_GROUPS_READ("permission-groups:read"),
  
  PERMISSION_GROUPS_WRITE("permission-groups:write"),
  
  TEAMS_READ("teams:read"),
  
  TEAMS_WRITE("teams:write"),
  
  TEAM_USERS_READ("team-users:read"),
  
  TEAM_USERS_WRITE("team-users:write"),
  
  PRODUCTS_READ("products:read"),
  
  PRODUCTS_WRITE("products:write"),
  
  PRODUCT_COUPONS_READ("product-coupons:read"),
  
  PRODUCT_COUPONS_WRITE("product-coupons:write"),
  
  PRODUCT_PURCHASES_READ("product-purchases:read"),
  
  PRODUCT_PURCHASES_WRITE("product-purchases:write"),
  
  PRODUCT_REVIEWS_READ("product-reviews:read"),
  
  PRODUCT_REVIEWS_WRITE("product-reviews:write"),
  
  PRODUCT_VERSIONS_READ("product-versions:read"),
  
  PRODUCT_VERSIONS_WRITE("product-versions:write"),
  
  PRODUCT_VERSIONS_DOWNLOAD("product-versions:download"),
  
  USERS_READ("users:read"),
  
  USERS_WRITE("users:write"),
  
  USER_BADGES_READ("user-badges:read"),
  
  USER_BADGES_WRITE("user-badges:write"),
  
  USER_BANS_READ("user-bans:read"),
  
  USER_PURCHASES_READ("user-purchases:read"),
  
  STAR("*");

  private String value;

  PersonalAccessTokenScope(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PersonalAccessTokenScope fromValue(String value) {
    for (PersonalAccessTokenScope b : PersonalAccessTokenScope.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PersonalAccessTokenScope> {
    @Override
    public void write(final JsonWriter jsonWriter, final PersonalAccessTokenScope enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PersonalAccessTokenScope read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PersonalAccessTokenScope.fromValue(value);
    }
  }
}

