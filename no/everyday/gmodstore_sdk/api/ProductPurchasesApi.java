/*
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.everyday.gmodstore_sdk.api;

import no.everyday.gmodstore_sdk.ApiCallback;
import no.everyday.gmodstore_sdk.ApiClient;
import no.everyday.gmodstore_sdk.ApiException;
import no.everyday.gmodstore_sdk.ApiResponse;
import no.everyday.gmodstore_sdk.Configuration;
import no.everyday.gmodstore_sdk.Pair;
import no.everyday.gmodstore_sdk.ProgressRequestBody;
import no.everyday.gmodstore_sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import no.everyday.gmodstore_sdk.model.CreateProductPurchaseResponse;
import no.everyday.gmodstore_sdk.model.Error;
import no.everyday.gmodstore_sdk.model.GetProductPurchaseResponse;
import no.everyday.gmodstore_sdk.model.NewProductPurchasePayload;
import no.everyday.gmodstore_sdk.model.ProductPurchaseFilter;
import no.everyday.gmodstore_sdk.model.UpdateProductPurchasePayload;
import no.everyday.gmodstore_sdk.model.UpdateProductPurchaseResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductPurchasesApi {
    private ApiClient localVarApiClient;

    public ProductPurchasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductPurchasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createProductPurchase
     * @param product  (required)
     * @param newProductPurchasePayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response containing the newly created product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createProductPurchaseCall(String product, NewProductPurchasePayload newProductPurchasePayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newProductPurchasePayload;

        // create path and map variables
        String localVarPath = "/api/v3/products/{product}/purchases"
            .replaceAll("\\{" + "product" + "\\}", localVarApiClient.escapeString(product.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductPurchaseValidateBeforeCall(String product, NewProductPurchasePayload newProductPurchasePayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling createProductPurchase(Async)");
        }
        

        okhttp3.Call localVarCall = createProductPurchaseCall(product, newProductPurchasePayload, _callback);
        return localVarCall;

    }

    /**
     * Create a purchase for a product
     * 
     * @param product  (required)
     * @param newProductPurchasePayload  (optional)
     * @return CreateProductPurchaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response containing the newly created product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public CreateProductPurchaseResponse createProductPurchase(String product, NewProductPurchasePayload newProductPurchasePayload) throws ApiException {
        ApiResponse<CreateProductPurchaseResponse> localVarResp = createProductPurchaseWithHttpInfo(product, newProductPurchasePayload);
        return localVarResp.getData();
    }

    /**
     * Create a purchase for a product
     * 
     * @param product  (required)
     * @param newProductPurchasePayload  (optional)
     * @return ApiResponse&lt;CreateProductPurchaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response containing the newly created product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CreateProductPurchaseResponse> createProductPurchaseWithHttpInfo(String product, NewProductPurchasePayload newProductPurchasePayload) throws ApiException {
        okhttp3.Call localVarCall = createProductPurchaseValidateBeforeCall(product, newProductPurchasePayload, null);
        Type localVarReturnType = new TypeToken<CreateProductPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a purchase for a product (asynchronously)
     * 
     * @param product  (required)
     * @param newProductPurchasePayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response containing the newly created product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createProductPurchaseAsync(String product, NewProductPurchasePayload newProductPurchasePayload, final ApiCallback<CreateProductPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductPurchaseValidateBeforeCall(product, newProductPurchasePayload, _callback);
        Type localVarReturnType = new TypeToken<CreateProductPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductPurchase
     * @param product  (required)
     * @param purchase  (required)
     * @param filter Filter the results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a single product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getProductPurchaseCall(String product, String purchase, ProductPurchaseFilter filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/products/{product}/purchases/{purchase}"
            .replaceAll("\\{" + "product" + "\\}", localVarApiClient.escapeString(product.toString()))
            .replaceAll("\\{" + "purchase" + "\\}", localVarApiClient.escapeString(purchase.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductPurchaseValidateBeforeCall(String product, String purchase, ProductPurchaseFilter filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling getProductPurchase(Async)");
        }
        
        // verify the required parameter 'purchase' is set
        if (purchase == null) {
            throw new ApiException("Missing the required parameter 'purchase' when calling getProductPurchase(Async)");
        }
        

        okhttp3.Call localVarCall = getProductPurchaseCall(product, purchase, filter, _callback);
        return localVarCall;

    }

    /**
     * Show the specified purchase for a product
     * 
     * @param product  (required)
     * @param purchase  (required)
     * @param filter Filter the results (optional)
     * @return GetProductPurchaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a single product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public GetProductPurchaseResponse getProductPurchase(String product, String purchase, ProductPurchaseFilter filter) throws ApiException {
        ApiResponse<GetProductPurchaseResponse> localVarResp = getProductPurchaseWithHttpInfo(product, purchase, filter);
        return localVarResp.getData();
    }

    /**
     * Show the specified purchase for a product
     * 
     * @param product  (required)
     * @param purchase  (required)
     * @param filter Filter the results (optional)
     * @return ApiResponse&lt;GetProductPurchaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a single product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetProductPurchaseResponse> getProductPurchaseWithHttpInfo(String product, String purchase, ProductPurchaseFilter filter) throws ApiException {
        okhttp3.Call localVarCall = getProductPurchaseValidateBeforeCall(product, purchase, filter, null);
        Type localVarReturnType = new TypeToken<GetProductPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the specified purchase for a product (asynchronously)
     * 
     * @param product  (required)
     * @param purchase  (required)
     * @param filter Filter the results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a single product purchase </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getProductPurchaseAsync(String product, String purchase, ProductPurchaseFilter filter, final ApiCallback<GetProductPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductPurchaseValidateBeforeCall(product, purchase, filter, _callback);
        Type localVarReturnType = new TypeToken<GetProductPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProductPurchases
     * @param product  (required)
     * @param perPage  (optional, default to 24)
     * @param cursor The cursor from which to return paginated results starting after (optional)
     * @param filter Filter the results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a list of product purchases </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listProductPurchasesCall(String product, Integer perPage, String cursor, ProductPurchaseFilter filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/products/{product}/purchases"
            .replaceAll("\\{" + "product" + "\\}", localVarApiClient.escapeString(product.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductPurchasesValidateBeforeCall(String product, Integer perPage, String cursor, ProductPurchaseFilter filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling listProductPurchases(Async)");
        }
        

        okhttp3.Call localVarCall = listProductPurchasesCall(product, perPage, cursor, filter, _callback);
        return localVarCall;

    }

    /**
     * List all purchases for a product
     * 
     * @param product  (required)
     * @param perPage  (optional, default to 24)
     * @param cursor The cursor from which to return paginated results starting after (optional)
     * @param filter Filter the results (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a list of product purchases </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public Object listProductPurchases(String product, Integer perPage, String cursor, ProductPurchaseFilter filter) throws ApiException {
        ApiResponse<Object> localVarResp = listProductPurchasesWithHttpInfo(product, perPage, cursor, filter);
        return localVarResp.getData();
    }

    /**
     * List all purchases for a product
     * 
     * @param product  (required)
     * @param perPage  (optional, default to 24)
     * @param cursor The cursor from which to return paginated results starting after (optional)
     * @param filter Filter the results (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a list of product purchases </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> listProductPurchasesWithHttpInfo(String product, Integer perPage, String cursor, ProductPurchaseFilter filter) throws ApiException {
        okhttp3.Call localVarCall = listProductPurchasesValidateBeforeCall(product, perPage, cursor, filter, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all purchases for a product (asynchronously)
     * 
     * @param product  (required)
     * @param perPage  (optional, default to 24)
     * @param cursor The cursor from which to return paginated results starting after (optional)
     * @param filter Filter the results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing a list of product purchases </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listProductPurchasesAsync(String product, Integer perPage, String cursor, ProductPurchaseFilter filter, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductPurchasesValidateBeforeCall(product, perPage, cursor, filter, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductPurchase
     * @param product  (required)
     * @param purchase  (required)
     * @param updateProductPurchasePayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing the product purchase with changes applied </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductPurchaseCall(String product, String purchase, UpdateProductPurchasePayload updateProductPurchasePayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateProductPurchasePayload;

        // create path and map variables
        String localVarPath = "/api/v3/products/{product}/purchases/{purchase}"
            .replaceAll("\\{" + "product" + "\\}", localVarApiClient.escapeString(product.toString()))
            .replaceAll("\\{" + "purchase" + "\\}", localVarApiClient.escapeString(purchase.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductPurchaseValidateBeforeCall(String product, String purchase, UpdateProductPurchasePayload updateProductPurchasePayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling updateProductPurchase(Async)");
        }
        
        // verify the required parameter 'purchase' is set
        if (purchase == null) {
            throw new ApiException("Missing the required parameter 'purchase' when calling updateProductPurchase(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductPurchaseCall(product, purchase, updateProductPurchasePayload, _callback);
        return localVarCall;

    }

    /**
     * Update the specified purchase for a product
     * 
     * @param product  (required)
     * @param purchase  (required)
     * @param updateProductPurchasePayload  (optional)
     * @return UpdateProductPurchaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing the product purchase with changes applied </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public UpdateProductPurchaseResponse updateProductPurchase(String product, String purchase, UpdateProductPurchasePayload updateProductPurchasePayload) throws ApiException {
        ApiResponse<UpdateProductPurchaseResponse> localVarResp = updateProductPurchaseWithHttpInfo(product, purchase, updateProductPurchasePayload);
        return localVarResp.getData();
    }

    /**
     * Update the specified purchase for a product
     * 
     * @param product  (required)
     * @param purchase  (required)
     * @param updateProductPurchasePayload  (optional)
     * @return ApiResponse&lt;UpdateProductPurchaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing the product purchase with changes applied </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateProductPurchaseResponse> updateProductPurchaseWithHttpInfo(String product, String purchase, UpdateProductPurchasePayload updateProductPurchasePayload) throws ApiException {
        okhttp3.Call localVarCall = updateProductPurchaseValidateBeforeCall(product, purchase, updateProductPurchasePayload, null);
        Type localVarReturnType = new TypeToken<UpdateProductPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the specified purchase for a product (asynchronously)
     * 
     * @param product  (required)
     * @param purchase  (required)
     * @param updateProductPurchasePayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response containing the product purchase with changes applied </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Improperly formatted request passed </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 401 </td><td> The passed bearer token is missing or invalid </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
        <tr><td> 403 </td><td> The passed bearer token does not have the right scopes </td><td>  * X-RateLimit-Limit -  <br>  * X-RateLimit-Remaining -  <br>  * X-RateLimit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductPurchaseAsync(String product, String purchase, UpdateProductPurchasePayload updateProductPurchasePayload, final ApiCallback<UpdateProductPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductPurchaseValidateBeforeCall(product, purchase, updateProductPurchasePayload, _callback);
        Type localVarReturnType = new TypeToken<UpdateProductPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
