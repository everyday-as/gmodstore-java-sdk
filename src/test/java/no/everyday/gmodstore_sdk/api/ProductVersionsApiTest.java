/*
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.everyday.gmodstore_sdk.api;

import no.everyday.gmodstore_sdk.ApiException;
import no.everyday.gmodstore_sdk.model.CreateProductVersionResponse;
import no.everyday.gmodstore_sdk.model.DownloadProductVersionResponse;
import no.everyday.gmodstore_sdk.model.Error;
import java.io.File;
import no.everyday.gmodstore_sdk.model.GetProductVersionResponse;
import no.everyday.gmodstore_sdk.model.ProductVersionFilter;
import no.everyday.gmodstore_sdk.model.UpdateProductVersionPayload;
import no.everyday.gmodstore_sdk.model.UpdateProductVersionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductVersionsApi
 */
@Ignore
public class ProductVersionsApiTest {

    private final ProductVersionsApi api = new ProductVersionsApi();

    
    /**
     * Create a version for a product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProductVersionTest() throws ApiException {
        String product = null;
        String name = null;
        String changelog = null;
        File file = null;
        String releaseType = null;
                CreateProductVersionResponse response = api.createProductVersion(product, name, changelog, file, releaseType);
        // TODO: test validations
    }
    
    /**
     * Get a one time use url for downloading a product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductDownloadTokenTest() throws ApiException {
        String product = null;
        String version = null;
                DownloadProductVersionResponse response = api.getProductDownloadToken(product, version);
        // TODO: test validations
    }
    
    /**
     * Show the specified version for a product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductVersionTest() throws ApiException {
        String product = null;
        String version = null;
        ProductVersionFilter filter = null;
                GetProductVersionResponse response = api.getProductVersion(product, version, filter);
        // TODO: test validations
    }
    
    /**
     * List all versions for a product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProductVersionsTest() throws ApiException {
        String product = null;
        Integer perPage = null;
        String cursor = null;
        ProductVersionFilter filter = null;
                Object response = api.listProductVersions(product, perPage, cursor, filter);
        // TODO: test validations
    }
    
    /**
     * Update the specified version for a product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductVersionTest() throws ApiException {
        String product = null;
        String version = null;
        UpdateProductVersionPayload updateProductVersionPayload = null;
                UpdateProductVersionResponse response = api.updateProductVersion(product, version, updateProductVersionPayload);
        // TODO: test validations
    }
    
}
