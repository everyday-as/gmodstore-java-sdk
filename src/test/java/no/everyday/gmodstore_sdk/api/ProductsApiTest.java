/*
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.everyday.gmodstore_sdk.api;

import no.everyday.gmodstore_sdk.ApiException;
import no.everyday.gmodstore_sdk.model.Error;
import no.everyday.gmodstore_sdk.model.GetProductResponse;
import no.everyday.gmodstore_sdk.model.GetProductsResponse;
import no.everyday.gmodstore_sdk.model.ProductFilter;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Get the specified product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductTest() throws ApiException {
        String product = null;
        ProductFilter filter = null;
                GetProductResponse response = api.getProduct(product, filter);
        // TODO: test validations
    }
    
    /**
     * Get a batch of products by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        List<UUID> ids = null;
        ProductFilter filter = null;
                GetProductsResponse response = api.getProducts(ids, filter);
        // TODO: test validations
    }
    
    /**
     * List all products for a team
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProductsTest() throws ApiException {
        String team = null;
        Integer perPage = null;
        String cursor = null;
        ProductFilter filter = null;
                Object response = api.listProducts(team, perPage, cursor, filter);
        // TODO: test validations
    }
    
    /**
     * Update the specified product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String product = null;
                api.updateProduct(product);
        // TODO: test validations
    }
    
}
